[
  {
    "name": "AlwaysFail",
    "type": "Decorator",
    "desc": "始终返回失败",
    "doc": "+ 只能有一个子节点，多个仅执行第一个\n+ 不管子节点是否成功都返回「失败」"
  },
  {
    "name": "AlwaysSuccess",
    "type": "Decorator",
    "desc": "始终返回成功",
    "doc": "+ 只能有一个子节点，多个仅执行第一个\n+ 不管子节点是否成功都返回「成功」"
  },
  {
    "name": "Assert",
    "type": "Decorator",
    "desc": "断言",
    "args": [
      {
        "name": "message",
        "type": "string",
        "desc": "消息"
      }
    ],
    "doc": "+ 只能有一个子节点，多个仅执行第一个\n+ 当子节点返回「失败」时，抛出异常\n+ 其余情况返回子节点的执行状态"
  },
  {
    "name": "Attack",
    "type": "Action",
    "desc": "攻击",
    "input": [
      "目标敌人"
    ]
  },
  {
    "name": "Calculate",
    "type": "Action",
    "desc": "简单的数值公式计算",
    "args": [
      {
        "name": "value",
        "type": "code",
        "desc": "值"
      }
    ],
    "output": [
      "计算结果"
    ],
    "doc": "+ 做简单的数值公式计算，返回结果到输出"
  },
  {
    "name": "Check",
    "type": "Condition",
    "desc": "检查True或False",
    "args": [
      {
        "name": "value",
        "type": "code",
        "desc": "值"
      }
    ],
    "doc": "+ 做简单数值公式判定，返回「成功」或「失败」"
  },
  {
    "name": "Clear",
    "type": "Action",
    "desc": "清除变量",
    "output": [
      "清除的变量名"
    ]
  },
  {
    "name": "FindEnemy",
    "type": "Action",
    "desc": "寻找敌人",
    "args": [
      {
        "name": "w",
        "type": "int",
        "desc": "宽度"
      },
      {
        "name": "h",
        "type": "int",
        "desc": "高度"
      },
      {
        "name": "count",
        "type": "int?",
        "desc": "数量"
      }
    ]
  },
  {
    "name": "ForEach",
    "type": "Composite",
    "desc": "遍历数组",
    "input": [
      "数组"
    ],
    "output": [
      "变量"
    ],
    "doc": "+ 每次执行子节点前会设置当前遍历到的变量\n+ 会执行所有子节点\n+ 当子节点返回「运行中」时，返回「运行中」状态\n+ 当子节点返回「失败」时，退出遍历并返回「失败」状态\n+ 执行完所有子节点后，返回「成功」"
  },
  {
    "name": "GetHp",
    "type": "Action",
    "desc": "获取生命值",
    "output": [
      "hp"
    ]
  },
  {
    "name": "Idle",
    "type": "Action",
    "desc": "待机"
  },
  {
    "name": "Inverter",
    "type": "Decorator",
    "desc": "反转子节点运行结果",
    "doc": "+ 只能有一个子节点，多个仅执行第一个\n+ 当子节点返回「成功」时返回「失败」\n+ 当子节点返回「失败」时返回「成功」\n+ 其余返回「运行中」"
  },
  {
    "name": "IsNull",
    "type": "Condition",
    "desc": "判断变量是否不存在",
    "input": [
      "判断的变量"
    ]
  },
  {
    "name": "IsStatus",
    "type": "Condition",
    "desc": "检查子节点状态",
    "args": [
      {
        "name": "status",
        "type": "enum",
        "desc": "检查子节点的执行状态",
        "options": [
          {
            "name": "成功",
            "value": "success"
          },
          {
            "name": "失败",
            "value": "failure"
          },
          {
            "name": "运行中",
            "value": "running"
          }
        ]
      }
    ],
    "doc": "+ 只能有一个子节点，多个仅执行第一个\n+ 只有当子节点的执行状态与指定状态相同时才返回「成功」，其余返回失败\n+ 若子节点返回「运行中」状态，将中断子节点并清理子节点的执行栈"
  },
  {
    "name": "Listen",
    "type": "Decorator",
    "desc": "侦听事件",
    "input": [
      "目标对象?"
    ],
    "output": [
      "事件参数?",
      "事件目标?"
    ],
    "args": [
      {
        "name": "event",
        "type": "string",
        "desc": "事件"
      }
    ],
    "doc": "+ 当事件触发时，执行第一个子节点，多个仅执行第一个\n+ 如果子节点返回 「运行中」，会中断执行并清理执行栈"
  },
  {
    "name": "ListenTree",
    "type": "Decorator",
    "desc": "侦听行为树事件",
    "args": [
      {
        "name": "builtin",
        "type": "enum",
        "desc": "事件",
        "options": [
          {
            "name": "行为树被中断",
            "value": "interrupted"
          },
          {
            "name": "行为树开始执行前",
            "value": "beforeRun"
          },
          {
            "name": "行为树执行完成后",
            "value": "afterRun"
          },
          {
            "name": "行为树执行成功后",
            "value": "afterRunSuccess"
          },
          {
            "name": "行为树执行失败后",
            "value": "afterRunFailure"
          }
        ]
      }
    ],
    "doc": "+ 当事件触发时，执行第一个子节点，多个仅执行第一个\n+ 如果子节点返回 「运行中」，会中断执行并清理执行栈"
  },
  {
    "name": "Log",
    "type": "Action",
    "desc": "打印日志",
    "args": [
      {
        "name": "message",
        "type": "string",
        "desc": "日志"
      },
      {
        "name": "level",
        "type": "enum",
        "desc": "日志级别",
        "options": [
          {
            "name": "INFO",
            "value": "info"
          },
          {
            "name": "DEBUG",
            "value": "debug"
          },
          {
            "name": "WARN",
            "value": "warn"
          },
          {
            "name": "ERROR",
            "value": "error"
          }
        ]
      }
    ]
  },
  {
    "name": "Loop",
    "type": "Composite",
    "desc": "循环执行",
    "input": [
      "循环次数?"
    ],
    "args": [
      {
        "name": "count",
        "type": "int",
        "desc": "循环次数"
      }
    ],
    "doc": "+ 对所有的子节点循环执行指定次数\n+ 当子节点返回「运行中」时，返回「运行中」状态\n+ 当子节点返回「失败」时，退出遍历并返回「失败」状态\n+ 执行完所有子节点后，返回「成功」\n"
  },
  {
    "name": "MoveToPos",
    "type": "Action",
    "desc": "移动到位置",
    "args": [
      {
        "name": "x",
        "type": "float",
        "desc": "x坐标"
      },
      {
        "name": "y",
        "type": "float",
        "desc": "y坐标"
      }
    ]
  },
  {
    "name": "MoveToTarget",
    "type": "Action",
    "desc": "移动到目标",
    "input": [
      "目标"
    ]
  },
  {
    "name": "NotNull",
    "type": "Condition",
    "desc": "判断变量是否存在",
    "input": [
      "判断的变量"
    ]
  },
  {
    "name": "Now",
    "type": "Action",
    "desc": "获取当前时间",
    "output": [
      "当前时间"
    ]
  },
  {
    "name": "Once",
    "type": "Decorator",
    "desc": "只执行一次",
    "doc": "+ 只能有一个子节点，多个仅执行第一个\n+ 第一次执行完全部子节点时返回「成功」，之后永远返回「失败」"
  },
  {
    "name": "Parallel",
    "type": "Composite",
    "desc": "并行执行",
    "doc": "+ 并行执行所有子节点\n+ 当有子节点返回「运行中」时，返回「运行中」状态\n+ 执行完所有子节点后，返回「成功」"
  },
  {
    "name": "RepeatUntilFailure",
    "type": "Decorator",
    "desc": "一直尝试直到子节点返回失败",
    "input": [
      "最大循环次数?"
    ],
    "args": [
      {
        "name": "maxLoop",
        "type": "int?",
        "desc": "最大循环次数"
      }
    ],
    "doc": "+ 只能有一个子节点，多个仅执行第一个\n+ 只有当子节点返回「失败」时，才返回「成功」，其它情况返回「运行中」状态\n+ 如果设定了尝试次数，超过指定次数则返回「失败」"
  },
  {
    "name": "RepeatUntilSuccess",
    "type": "Decorator",
    "desc": "一直尝试直到子节点返回成功",
    "input": [
      "最大循环次数?"
    ],
    "args": [
      {
        "name": "maxLoop",
        "type": "int?",
        "desc": "最大循环次数"
      }
    ],
    "doc": "+ 只能有一个子节点，多个仅执行第一个\n+ 只有当子节点返回「成功」时，才返回「成功」，其它情况返回「运行中」状态\n+ 如果设定了尝试次数，超过指定次数则返回「失败」"
  },
  {
    "name": "Selector",
    "type": "Composite",
    "desc": "选择执行",
    "doc": "+ 一直往下执行，有子节点返回「成功」则返回「成功」\n+ 若全部节点返回「失败」则返回「失败」"
  },
  {
    "name": "Sequence",
    "type": "Composite",
    "desc": "顺序执行",
    "doc": "+ 一直往下执行，只有当所有子节点都返回「成功」, 才返回「成功」\n+ 若子节点返回「失败」，则直接返回「失败」状态\n+ 其余情况返回「运行中」状态"
  },
  {
    "name": "Timeout",
    "type": "Decorator",
    "desc": "超时",
    "args": [
      {
        "name": "time",
        "type": "float",
        "desc": "超时时间"
      }
    ],
    "doc": "+ 只能有一个子节点，多个仅执行第一个\n+ 当子节点执行超时或返回「失败」时，返回「失败」\n+ 其余情况返回子节点的执行状态\n"
  },
  {
    "name": "Wait",
    "type": "Action",
    "desc": "等待",
    "input": [
      "等待时间?"
    ],
    "args": [
      {
        "name": "time",
        "type": "float",
        "desc": "等待时间"
      },
      {
        "name": "random",
        "type": "float?",
        "desc": "随机范围"
      }
    ]
  }
]